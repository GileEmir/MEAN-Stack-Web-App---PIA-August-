import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, ViewEncapsulation, } from '@angular/core';
import { MatDatepickerIntl } from '@angular/material/datepicker';
import { first } from 'rxjs/operators';
import { DatetimeAdapter } from '../adapter/datetime-adapter';
import { MAT_DATETIME_FORMATS, } from '../adapter/datetime-formats';
import { slideCalendar } from './datetimepicker-animations';
import { createMissingDateImplError } from './datetimepicker-errors';
import { MatDatetimepickerFilterType } from './datetimepicker-filtertype';
import { getActiveOffset, isSameMultiYearView, yearsPerPage, yearsPerRow, } from './multi-year-view';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/datepicker";
import * as i2 from "../adapter/datetime-adapter";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/icon";
import * as i5 from "./clock";
import * as i6 from "./month-view";
import * as i7 from "./year-view";
import * as i8 from "./multi-year-view";
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
export class MatDatetimepickerCalendarComponent {
    constructor(_elementRef, _intl, _ngZone, _adapter, _dateFormats, changeDetectorRef) {
        this._elementRef = _elementRef;
        this._intl = _intl;
        this._ngZone = _ngZone;
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        /** Active multi year view when click on year. */
        this.multiYearSelector = false;
        /** Whether the calendar should be started in month or year view. */
        this.startView = 'month';
        this.twelvehour = false;
        this.timeInterval = 1;
        this.ariaLabel = 'Use arrow keys to navigate';
        this.ariaNextMonthLabel = 'Next month';
        this.ariaPrevMonthLabel = 'Previous month';
        this.ariaNextYearLabel = 'Next year';
        this.ariaPrevYearLabel = 'Previous year';
        this.ariaNextMultiYearLabel = 'Next year range';
        this.ariaPrevMultiYearLabel = 'Previous year range';
        /** Prevent user to select same date time */
        this.preventSameDateTimeSelection = false;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /** Emits when the view has been changed. **/
        this.viewChanged = new EventEmitter();
        this._clockView = 'hour';
        this._type = 'date';
        /** Date filter for the month and year views. */
        this._dateFilterForViews = (date) => {
            return (!!date &&
                (!this.dateFilter ||
                    this.dateFilter(date, MatDatetimepickerFilterType.DATE)) &&
                (!this.minDate || this._adapter.compareDate(date, this.minDate) >= 0) &&
                (!this.maxDate || this._adapter.compareDate(date, this.maxDate) <= 0));
        };
        if (!this._adapter) {
            throw createMissingDateImplError('DatetimeAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATETIME_FORMATS');
        }
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || 'date';
        if (this.type === 'year') {
            this.multiYearSelector = true;
        }
    }
    /** A date representing the period (month or year) to start the calendar in. */
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this._adapter.getValidDateOrNull(value);
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(value);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(value);
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     */
    get _activeDate() {
        return this._clampedActiveDate;
    }
    set _activeDate(value) {
        const oldActiveDate = this._clampedActiveDate;
        this._clampedActiveDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
        if (oldActiveDate &&
            this._clampedActiveDate &&
            this.currentView === 'month' &&
            !this._adapter.sameMonthAndYear(oldActiveDate, this._clampedActiveDate)) {
            if (this._adapter.isInNextMonth(oldActiveDate, this._clampedActiveDate)) {
                this.calendarState('right');
            }
            else {
                this.calendarState('left');
            }
        }
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
        this.viewChanged.emit(view);
    }
    /** The label for the current calendar view. */
    get _yearLabel() {
        return this._adapter.getYearName(this._activeDate);
    }
    get _monthYearLabel() {
        if (this.currentView === 'multi-year') {
            // The offset from the active year to the "slot" for the starting year is the
            // *actual* first rendered year in the multi-year view, and the last year is
            // just yearsPerPage - 1 away.
            const activeYear = this._adapter.getYear(this._activeDate);
            const minYearOfPage = activeYear -
                getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate);
            const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
            const minYearName = this._adapter.getYearName(this._adapter.createDate(minYearOfPage, 0, 1));
            const maxYearName = this._adapter.getYearName(this._adapter.createDate(maxYearOfPage, 0, 1));
            return this._intl.formatYearRange(minYearName, maxYearName);
        }
        return this.currentView === 'month'
            ? this._adapter.getMonthNames('long')[this._adapter.getMonth(this._activeDate)]
            : this._adapter.getYearName(this._activeDate);
    }
    get _dateLabel() {
        switch (this.type) {
            case 'month':
                return this._adapter.getMonthNames('long')[this._adapter.getMonth(this._activeDate)];
            default:
                return this._adapter.format(this._activeDate, this._dateFormats.display.popupHeaderDateLabel);
        }
    }
    get _hoursLabel() {
        let hour = this._adapter.getHour(this._activeDate);
        if (this.twelvehour) {
            if (hour === 0) {
                hour = 24;
            }
            hour = hour > 12 ? hour - 12 : hour;
        }
        return this._2digit(hour);
    }
    get _minutesLabel() {
        return this._2digit(this._adapter.getMinute(this._activeDate));
    }
    get _ariaLabelNext() {
        switch (this._currentView) {
            case 'month':
                return this.ariaNextMonthLabel;
            case 'year':
                return this.ariaNextYearLabel;
            case 'multi-year':
                return this.ariaNextMultiYearLabel;
            default:
                return '';
        }
    }
    get _ariaLabelPrev() {
        switch (this._currentView) {
            case 'month':
                return this.ariaPrevMonthLabel;
            case 'year':
                return this.ariaPrevYearLabel;
            case 'multi-year':
                return this.ariaPrevMultiYearLabel;
            default:
                return '';
        }
    }
    _userSelected() {
        this._userSelection.emit();
    }
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._adapter.today();
        this._selectAMPM(this._activeDate);
        this._focusActiveCell();
        if (this.type === 'year') {
            this.currentView = 'multi-year';
        }
        else if (this.type === 'month') {
            this.currentView = 'year';
        }
        else if (this.type === 'time') {
            this.currentView = 'clock';
        }
        else {
            this.currentView = this.startView || 'month';
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
    /** Handles date selection in the month view. */
    _dateSelected(date) {
        if (this.type === 'date') {
            if (!this._adapter.sameDate(date, this.selected) ||
                !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(date);
            }
        }
        else {
            this._activeDate = date;
            this.currentView = 'clock';
        }
    }
    /** Handles month selection in the year view. */
    _monthSelected(month) {
        if (this.type === 'month') {
            if (!this._adapter.sameMonthAndYear(month, this.selected) ||
                !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(this._adapter.getFirstDateOfMonth(month));
            }
        }
        else {
            this._activeDate = month;
            this.currentView = 'month';
            this._clockView = 'hour';
        }
    }
    /** Handles year selection in the multi year view. */
    _yearSelected(year) {
        if (this.type === 'year') {
            if (!this._adapter.sameYear(year, this.selected) ||
                !this.preventSameDateTimeSelection) {
                const normalizedDate = this._adapter.createDatetime(this._adapter.getYear(year), 0, 1, 0, 0);
                this.selectedChange.emit(normalizedDate);
            }
        }
        else {
            this._activeDate = year;
            this.currentView = 'year';
        }
    }
    _timeSelected(date) {
        if (this._clockView !== 'minute') {
            this._activeDate = this._updateDate(date);
            this._clockView = 'minute';
        }
        else {
            if (!this._adapter.sameDatetime(date, this.selected) ||
                !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(date);
            }
        }
    }
    _onActiveDateChange(date) {
        this._activeDate = date;
    }
    _updateDate(date) {
        if (this.twelvehour) {
            const HOUR = this._adapter.getHour(date);
            if (HOUR === 12) {
                if (this._AMPM === 'AM') {
                    return this._adapter.addCalendarHours(date, -12);
                }
            }
            else if (this._AMPM === 'PM') {
                return this._adapter.addCalendarHours(date, 12);
            }
        }
        return date;
    }
    _selectAMPM(date) {
        if (this._adapter.getHour(date) > 11) {
            this._AMPM = 'PM';
        }
        else {
            this._AMPM = 'AM';
        }
    }
    _ampmClicked(source) {
        if (source === this._AMPM) {
            return;
        }
        this._AMPM = source;
        if (this._AMPM === 'AM') {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, -12);
        }
        else {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, 12);
        }
    }
    _yearClicked() {
        if (this.type === 'year' || this.multiYearSelector) {
            this.currentView = 'multi-year';
            return;
        }
        this.currentView = 'year';
    }
    _dateClicked() {
        if (this.type !== 'month') {
            this.currentView = 'month';
        }
    }
    _hoursClicked() {
        this.currentView = 'clock';
        this._clockView = 'hour';
    }
    _minutesClicked() {
        this.currentView = 'clock';
        this._clockView = 'minute';
    }
    /** Handles user clicks on the previous button. */
    _previousClicked() {
        this._activeDate =
            this.currentView === 'month'
                ? this._adapter.addCalendarMonths(this._activeDate, -1)
                : this._adapter.addCalendarYears(this._activeDate, this.currentView === 'year' ? -1 : -yearsPerPage);
    }
    /** Handles user clicks on the next button. */
    _nextClicked() {
        this._activeDate =
            this.currentView === 'month'
                ? this._adapter.addCalendarMonths(this._activeDate, 1)
                : this._adapter.addCalendarYears(this._activeDate, this.currentView === 'year' ? 1 : yearsPerPage);
    }
    /** Whether the previous period button is enabled. */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /** Whether the next period button is enabled. */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /** Handles keydown events on the calendar body. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        if (this.currentView === 'month') {
            this._handleCalendarBodyKeydownInMonthView(event);
        }
        else if (this.currentView === 'year') {
            this._handleCalendarBodyKeydownInYearView(event);
        }
        else if (this.currentView === 'multi-year') {
            this._handleCalendarBodyKeydownInMultiYearView(event);
        }
        else {
            this._handleCalendarBodyKeydownInClockView(event);
        }
    }
    _focusActiveCell() {
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable
                .asObservable()
                .pipe(first())
                .subscribe(() => {
                this._elementRef.nativeElement.focus();
            });
        });
    }
    _calendarStateDone() {
        this._calendarState = '';
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    _isSameView(date1, date2) {
        if (this.currentView === 'month') {
            return (this._adapter.getYear(date1) === this._adapter.getYear(date2) &&
                this._adapter.getMonth(date1) === this._adapter.getMonth(date2));
        }
        if (this.currentView === 'year') {
            return this._adapter.getYear(date1) === this._adapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return isSameMultiYearView(this._adapter, date1, date2, this.minDate, this.maxDate);
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydownInMonthView(event) {
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1 - this._adapter.getDate(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, this._adapter.getNumDaysInMonth(this._activeDate) -
                    this._adapter.getDate(this._activeDate));
                break;
            case PAGE_UP:
                this._activeDate = event.altKey
                    ? this._adapter.addCalendarYears(this._activeDate, -1)
                    : this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this._activeDate = event.altKey
                    ? this._adapter.addCalendarYears(this._activeDate, 1)
                    : this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (this._dateFilterForViews(this._activeDate)) {
                    this._dateSelected(this._activeDate);
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Handles keydown events on the calendar body when calendar is in year view. */
    _handleCalendarBodyKeydownInYearView(event) {
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._prevMonthInSameCol(this._activeDate);
                break;
            case DOWN_ARROW:
                this._activeDate = this._nextMonthInSameCol(this._activeDate);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -this._adapter.getMonth(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 11 - this._adapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
                this._monthSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Handles keydown events on the calendar body when calendar is in multi-year view. */
    _handleCalendarBodyKeydownInMultiYearView(event) {
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerPage -
                    getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate) -
                    1);
                break;
            case PAGE_UP:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case PAGE_DOWN:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case ENTER:
                this._yearSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydownInClockView(event) {
        switch (event.keyCode) {
            case UP_ARROW:
                this._activeDate =
                    this._clockView === 'hour'
                        ? this._adapter.addCalendarHours(this._activeDate, 1)
                        : this._adapter.addCalendarMinutes(this._activeDate, 1);
                break;
            case DOWN_ARROW:
                this._activeDate =
                    this._clockView === 'hour'
                        ? this._adapter.addCalendarHours(this._activeDate, -1)
                        : this._adapter.addCalendarMinutes(this._activeDate, -1);
                break;
            case ENTER:
                this._timeSelected(this._activeDate);
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     */
    _prevMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        const increment = this._adapter.getMonth(date) <= 4
            ? -5
            : this._adapter.getMonth(date) >= 7
                ? -7
                : -12;
        return this._adapter.addCalendarMonths(date, increment);
    }
    /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     */
    _nextMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        const increment = this._adapter.getMonth(date) <= 4
            ? 7
            : this._adapter.getMonth(date) >= 7
                ? 5
                : 12;
        return this._adapter.addCalendarMonths(date, increment);
    }
    calendarState(direction) {
        this._calendarState = direction;
    }
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: MatDatetimepickerCalendarComponent, deps: [{ token: i0.ElementRef }, { token: i1.MatDatepickerIntl }, { token: i0.NgZone }, { token: i2.DatetimeAdapter, optional: true }, { token: MAT_DATETIME_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.4", type: MatDatetimepickerCalendarComponent, selector: "mat-datetimepicker-calendar", inputs: { multiYearSelector: "multiYearSelector", startView: "startView", twelvehour: "twelvehour", timeInterval: "timeInterval", dateFilter: "dateFilter", ariaLabel: "ariaLabel", ariaNextMonthLabel: "ariaNextMonthLabel", ariaPrevMonthLabel: "ariaPrevMonthLabel", ariaNextYearLabel: "ariaNextYearLabel", ariaPrevYearLabel: "ariaPrevYearLabel", ariaNextMultiYearLabel: "ariaNextMultiYearLabel", ariaPrevMultiYearLabel: "ariaPrevMultiYearLabel", preventSameDateTimeSelection: "preventSameDateTimeSelection", type: "type", startAt: "startAt", selected: "selected", minDate: "minDate", maxDate: "maxDate" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange", viewChanged: "viewChanged" }, host: { attributes: { "role": "dialog", "tabindex": "0" }, listeners: { "keydown": "_handleCalendarBodyKeydown($event)" }, properties: { "class.mat-datetimepicker-calendar": "true", "attr.aria-label": "ariaLabel" } }, ngImport: i0, template: "<div class=\"mat-datetimepicker-calendar-header\">\n  <div\n    (click)=\"_yearClicked()\"\n    *ngIf=\"type !== 'time'\"\n    [class.active]=\"currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-datetimepicker-calendar-header-year\"\n    role=\"button\"\n  >\n    {{ _yearLabel }}\n    <mat-icon *ngIf=\"multiYearSelector || type === 'year'\"\n      >arrow_drop_down</mat-icon\n    >\n  </div>\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\n    <span\n      (click)=\"_dateClicked()\"\n      *ngIf=\"type !== 'time' && type !== 'year'\"\n      [class.active]=\"currentView === 'month'\"\n      [class.not-clickable]=\"type === 'month'\"\n      class=\"mat-datetimepicker-calendar-header-date\"\n      role=\"button\"\n      >{{ _dateLabel }}</span\n    >\n    <span\n      *ngIf=\"type.endsWith('time')\"\n      [class.active]=\"currentView === 'clock'\"\n      class=\"mat-datetimepicker-calendar-header-time\"\n    >\n      <span\n        (click)=\"_hoursClicked()\"\n        [class.active]=\"_clockView === 'hour'\"\n        class=\"mat-datetimepicker-calendar-header-hours\"\n        role=\"button\"\n        >{{ _hoursLabel }}</span\n      >:<span\n        (click)=\"_minutesClicked()\"\n        [class.active]=\"_clockView === 'minute'\"\n        class=\"mat-datetimepicker-calendar-header-minutes\"\n        role=\"button\"\n        >{{ _minutesLabel }}</span\n      >\n      <br />\n      <span\n        *ngIf=\"twelvehour\"\n        class=\"mat-datetimepicker-calendar-header-ampm-container\"\n      >\n        <span\n          (click)=\"_ampmClicked('AM')\"\n          [class.active]=\"_AMPM === 'AM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >AM</span\n        >/<span\n          (click)=\"_ampmClicked('PM')\"\n          [class.active]=\"_AMPM === 'PM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >PM</span\n        >\n      </span>\n    </span>\n  </div>\n</div>\n<div [ngSwitch]=\"currentView\" class=\"mat-datetimepicker-calendar-content\">\n  <div\n    *ngIf=\"currentView === 'month' || currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-month-content\"\n  >\n    <div class=\"mat-datetimepicker-calendar-controls\">\n      <div\n        (click)=\"_previousClicked()\"\n        [attr.aria-disabled]=\"!_previousEnabled()\"\n        [attr.aria-label]=\"_ariaLabelPrev\"\n        [class.disabled]=\"!_previousEnabled()\"\n        class=\"mat-datetimepicker-calendar-previous-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n        </svg>\n      </div>\n      <div\n        (@slideCalendar.done)=\"_calendarStateDone()\"\n        [@slideCalendar]=\"_calendarState\"\n        class=\"mat-datetimepicker-calendar-period-button\"\n      >\n        <strong>{{ _monthYearLabel }}</strong>\n      </div>\n      <div\n        (click)=\"_nextClicked()\"\n        [attr.aria-disabled]=\"!_nextEnabled()\"\n        [attr.aria-label]=\"_ariaLabelNext\"\n        [class.disabled]=\"!_nextEnabled()\"\n        class=\"mat-datetimepicker-calendar-next-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\n        </svg>\n      </div>\n    </div>\n  </div>\n  <mat-datetimepicker-month-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_dateSelected($event)\"\n    *ngSwitchCase=\"'month'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-month-view>\n  <mat-datetimepicker-year-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_monthSelected($event)\"\n    *ngSwitchCase=\"'year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-year-view>\n  <mat-datetimepicker-multi-year-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_yearSelected($event)\"\n    *ngSwitchCase=\"'multi-year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-multi-year-view>\n  <mat-datetimepicker-clock\n    (_userSelection)=\"_userSelected()\"\n    (activeDateChange)=\"_onActiveDateChange($event)\"\n    (selectedChange)=\"_timeSelected($event)\"\n    *ngSwitchDefault\n    [dateFilter]=\"dateFilter\"\n    [interval]=\"timeInterval\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"_activeDate\"\n    [startView]=\"_clockView\"\n    [twelvehour]=\"twelvehour\"\n  >\n  </mat-datetimepicker-clock>\n</div>\n", styles: [".mat-datetimepicker-calendar{-webkit-user-select:none;user-select:none;display:block;outline:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{padding:16px;font-size:14px;box-sizing:border-box}[mode=landscape] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{width:100%;font-weight:500;white-space:nowrap}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm.not-clickable{cursor:initial}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{width:100%;padding:0 8px 8px;outline:none;box-sizing:border-box;overflow:hidden}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-period-button{display:inline-block;height:48px;padding:12px;outline:none;border:0;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-previous-button,.mat-datetimepicker-calendar-next-button{display:inline-block;width:48px;height:48px;padding:12px;outline:none;border:0;cursor:pointer;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-previous-button.disabled,.mat-datetimepicker-calendar-next-button.disabled{color:#00000061;pointer-events:none}.mat-datetimepicker-calendar-previous-button svg,.mat-datetimepicker-calendar-next-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-datetimepicker-calendar-table-header{color:#00000061}.mat-datetimepicker-calendar-table-header th{text-align:center;font-size:11px;padding:0 0 8px}@media (min-width: 480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i5.MatDatetimepickerClockComponent, selector: "mat-datetimepicker-clock", inputs: ["dateFilter", "interval", "twelvehour", "activeDate", "selected", "minDate", "maxDate", "startView"], outputs: ["_userSelection", "selectedChange", "activeDateChange"] }, { kind: "component", type: i6.MatDatetimepickerMonthViewComponent, selector: "mat-datetimepicker-month-view", inputs: ["type", "dateFilter", "activeDate", "selected"], outputs: ["_userSelection", "selectedChange"] }, { kind: "component", type: i7.MatDatetimepickerYearViewComponent, selector: "mat-datetimepicker-year-view", inputs: ["type", "dateFilter", "activeDate", "selected"], outputs: ["_userSelection", "selectedChange"] }, { kind: "component", type: i8.MatDatetimepickerMultiYearViewComponent, selector: "mat-datetimepicker-multi-year-view", inputs: ["type", "dateFilter", "activeDate", "selected", "minDate", "maxDate"], outputs: ["_userSelection", "selectedChange"] }], animations: [slideCalendar], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: MatDatetimepickerCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mat-datetimepicker-calendar', host: {
                        '[class.mat-datetimepicker-calendar]': 'true',
                        '[attr.aria-label]': 'ariaLabel',
                        role: 'dialog',
                        tabindex: '0',
                        '(keydown)': '_handleCalendarBodyKeydown($event)',
                    }, animations: [slideCalendar], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"mat-datetimepicker-calendar-header\">\n  <div\n    (click)=\"_yearClicked()\"\n    *ngIf=\"type !== 'time'\"\n    [class.active]=\"currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-datetimepicker-calendar-header-year\"\n    role=\"button\"\n  >\n    {{ _yearLabel }}\n    <mat-icon *ngIf=\"multiYearSelector || type === 'year'\"\n      >arrow_drop_down</mat-icon\n    >\n  </div>\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\n    <span\n      (click)=\"_dateClicked()\"\n      *ngIf=\"type !== 'time' && type !== 'year'\"\n      [class.active]=\"currentView === 'month'\"\n      [class.not-clickable]=\"type === 'month'\"\n      class=\"mat-datetimepicker-calendar-header-date\"\n      role=\"button\"\n      >{{ _dateLabel }}</span\n    >\n    <span\n      *ngIf=\"type.endsWith('time')\"\n      [class.active]=\"currentView === 'clock'\"\n      class=\"mat-datetimepicker-calendar-header-time\"\n    >\n      <span\n        (click)=\"_hoursClicked()\"\n        [class.active]=\"_clockView === 'hour'\"\n        class=\"mat-datetimepicker-calendar-header-hours\"\n        role=\"button\"\n        >{{ _hoursLabel }}</span\n      >:<span\n        (click)=\"_minutesClicked()\"\n        [class.active]=\"_clockView === 'minute'\"\n        class=\"mat-datetimepicker-calendar-header-minutes\"\n        role=\"button\"\n        >{{ _minutesLabel }}</span\n      >\n      <br />\n      <span\n        *ngIf=\"twelvehour\"\n        class=\"mat-datetimepicker-calendar-header-ampm-container\"\n      >\n        <span\n          (click)=\"_ampmClicked('AM')\"\n          [class.active]=\"_AMPM === 'AM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >AM</span\n        >/<span\n          (click)=\"_ampmClicked('PM')\"\n          [class.active]=\"_AMPM === 'PM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >PM</span\n        >\n      </span>\n    </span>\n  </div>\n</div>\n<div [ngSwitch]=\"currentView\" class=\"mat-datetimepicker-calendar-content\">\n  <div\n    *ngIf=\"currentView === 'month' || currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-month-content\"\n  >\n    <div class=\"mat-datetimepicker-calendar-controls\">\n      <div\n        (click)=\"_previousClicked()\"\n        [attr.aria-disabled]=\"!_previousEnabled()\"\n        [attr.aria-label]=\"_ariaLabelPrev\"\n        [class.disabled]=\"!_previousEnabled()\"\n        class=\"mat-datetimepicker-calendar-previous-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n        </svg>\n      </div>\n      <div\n        (@slideCalendar.done)=\"_calendarStateDone()\"\n        [@slideCalendar]=\"_calendarState\"\n        class=\"mat-datetimepicker-calendar-period-button\"\n      >\n        <strong>{{ _monthYearLabel }}</strong>\n      </div>\n      <div\n        (click)=\"_nextClicked()\"\n        [attr.aria-disabled]=\"!_nextEnabled()\"\n        [attr.aria-label]=\"_ariaLabelNext\"\n        [class.disabled]=\"!_nextEnabled()\"\n        class=\"mat-datetimepicker-calendar-next-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\n        </svg>\n      </div>\n    </div>\n  </div>\n  <mat-datetimepicker-month-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_dateSelected($event)\"\n    *ngSwitchCase=\"'month'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-month-view>\n  <mat-datetimepicker-year-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_monthSelected($event)\"\n    *ngSwitchCase=\"'year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-year-view>\n  <mat-datetimepicker-multi-year-view\n    (_userSelection)=\"_userSelected()\"\n    (selectedChange)=\"_yearSelected($event)\"\n    *ngSwitchCase=\"'multi-year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-multi-year-view>\n  <mat-datetimepicker-clock\n    (_userSelection)=\"_userSelected()\"\n    (activeDateChange)=\"_onActiveDateChange($event)\"\n    (selectedChange)=\"_timeSelected($event)\"\n    *ngSwitchDefault\n    [dateFilter]=\"dateFilter\"\n    [interval]=\"timeInterval\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"_activeDate\"\n    [startView]=\"_clockView\"\n    [twelvehour]=\"twelvehour\"\n  >\n  </mat-datetimepicker-clock>\n</div>\n", styles: [".mat-datetimepicker-calendar{-webkit-user-select:none;user-select:none;display:block;outline:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{padding:16px;font-size:14px;box-sizing:border-box}[mode=landscape] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{width:100%;font-weight:500;white-space:nowrap}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-year.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-ampm.not-clickable{cursor:initial}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes,.mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{width:100%;padding:0 8px 8px;outline:none;box-sizing:border-box;overflow:hidden}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-period-button{display:inline-block;height:48px;padding:12px;outline:none;border:0;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-previous-button,.mat-datetimepicker-calendar-next-button{display:inline-block;width:48px;height:48px;padding:12px;outline:none;border:0;cursor:pointer;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-previous-button.disabled,.mat-datetimepicker-calendar-next-button.disabled{color:#00000061;pointer-events:none}.mat-datetimepicker-calendar-previous-button svg,.mat-datetimepicker-calendar-next-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-datetimepicker-calendar-table-header{color:#00000061}.mat-datetimepicker-calendar-table-header th{text-align:center;font-size:11px;padding:0 0 8px}@media (min-width: 480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.MatDatepickerIntl }, { type: i0.NgZone }, { type: i2.DatetimeAdapter, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAT_DATETIME_FORMATS]
                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { _userSelection: [{
                type: Output
            }], multiYearSelector: [{
                type: Input
            }], startView: [{
                type: Input
            }], twelvehour: [{
                type: Input
            }], timeInterval: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], ariaNextMonthLabel: [{
                type: Input
            }], ariaPrevMonthLabel: [{
                type: Input
            }], ariaNextYearLabel: [{
                type: Input
            }], ariaPrevYearLabel: [{
                type: Input
            }], ariaNextMultiYearLabel: [{
                type: Input
            }], ariaPrevMultiYearLabel: [{
                type: Input
            }], preventSameDateTimeSelection: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], type: [{
                type: Input
            }], startAt: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,