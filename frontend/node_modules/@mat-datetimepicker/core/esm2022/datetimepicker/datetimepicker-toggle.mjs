import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, } from '@angular/core';
import { MatDatepickerIntl } from '@angular/material/datepicker';
import { asyncScheduler, merge, scheduled, Subscription } from 'rxjs';
import { MatDatetimepickerComponent } from './datetimepicker';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/datepicker";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
export class MatDatetimepickerToggleComponent {
    constructor(_intl, _changeDetectorRef) {
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChanges = Subscription.EMPTY;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        return this._disabled === undefined
            ? this.datetimepicker.disabled
            : !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    _open(event) {
        if (this.datetimepicker && !this.disabled) {
            this.datetimepicker.open();
            event.stopPropagation();
        }
    }
    _watchStateChanges() {
        const datepickerDisabled = this.datetimepicker
            ? this.datetimepicker._disabledChange
            : scheduled([], asyncScheduler);
        const inputDisabled = this.datetimepicker && this.datetimepicker._datepickerInput
            ? this.datetimepicker._datepickerInput._disabledChange
            : scheduled([], asyncScheduler);
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled).subscribe(() => this._changeDetectorRef.markForCheck());
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: MatDatetimepickerToggleComponent, deps: [{ token: i1.MatDatepickerIntl }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.4", type: MatDatetimepickerToggleComponent, selector: "mat-datetimepicker-toggle", inputs: { datetimepicker: ["for", "datetimepicker"], disabled: "disabled" }, host: { listeners: { "click": "_open($event)" }, classAttribute: "mat-datetimepicker-toggle" }, exportAs: ["matDatetimepickerToggle"], usesOnChanges: true, ngImport: i0, template: "<button\n  [attr.aria-label]=\"_intl.openCalendarLabel\"\n  [disabled]=\"disabled\"\n  mat-icon-button\n  type=\"button\"\n>\n  <mat-icon [ngSwitch]=\"datetimepicker.type\">\n    <svg\n      *ngSwitchCase=\"'time'\"\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path\n        d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\"\n      ></path>\n    </svg>\n    <svg\n      *ngSwitchCase=\"'datetime'\"\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path\n        d=\"M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z\"\n      ></path>\n    </svg>\n    <svg\n      *ngSwitchDefault\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path\n        d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"\n      />\n    </svg>\n  </mat-icon>\n</button>\n", dependencies: [{ kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i3.MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: MatDatetimepickerToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mat-datetimepicker-toggle', host: {
                        class: 'mat-datetimepicker-toggle',
                        // Bind the `click` on the host, rather than the inner `button`, so that we can call `stopPropagation`
                        // on it without affecting the user's `click` handlers. We need to stop it so that the input doesn't
                        // get focused automatically by the form field (See https://github.com/angular/components/pull/21856).
                        '(click)': '_open($event)',
                    }, exportAs: 'matDatetimepickerToggle', encapsulation: ViewEncapsulation.None, preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  [attr.aria-label]=\"_intl.openCalendarLabel\"\n  [disabled]=\"disabled\"\n  mat-icon-button\n  type=\"button\"\n>\n  <mat-icon [ngSwitch]=\"datetimepicker.type\">\n    <svg\n      *ngSwitchCase=\"'time'\"\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path\n        d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\"\n      ></path>\n    </svg>\n    <svg\n      *ngSwitchCase=\"'datetime'\"\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path\n        d=\"M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z\"\n      ></path>\n    </svg>\n    <svg\n      *ngSwitchDefault\n      fill=\"currentColor\"\n      focusable=\"false\"\n      height=\"100%\"\n      style=\"vertical-align: top\"\n      viewBox=\"0 0 24 24\"\n      width=\"100%\"\n    >\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path\n        d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"\n      />\n    </svg>\n  </mat-icon>\n</button>\n" }]
        }], ctorParameters: () => [{ type: i1.MatDatepickerIntl }, { type: i0.ChangeDetectorRef }], propDecorators: { datetimepicker: [{
                type: Input,
                args: ['for']
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,